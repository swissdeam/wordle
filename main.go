package main

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"
)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞
func checkLen(word string) bool {
	if utf8.RuneCountInString(word) != 5 {
		fmt.Println("–í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –±—É–∫–≤")
		return false
	}
	return true
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞ —Å–ª–æ–≤–∞
func checkLanguage(word string) bool {
	re := regexp.MustCompile("^[–ê-–Ø–∞-—è]+$")
	if !re.MatchString(word) {
		fmt.Println("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏")
		return false
	}
	return true
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func checkTry(word string, wordx string) []string {
	letters := []rune(word)
	lettersx := []rune(wordx)
	result := make([]string, len(letters))
	usedInWordx := make([]bool, len(lettersx))

	for i := 0; i < len(letters); i++ {
		if letters[i] == lettersx[i] {
			result[i] = "üü¢"
			usedInWordx[i] = true
		}
	}

	for i := 0; i < len(letters); i++ {
		if result[i] == "üü¢" {
			continue
		}

		matched := false
		for j := 0; j < len(lettersx); j++ {
			if letters[i] == lettersx[j] && !usedInWordx[j] {
				result[i] = "üü°"
				usedInWordx[j] = true
				matched = true
				break
			}
		}
		if !matched {
			result[i] = "‚ö´"
		}
		// log.Println(result, "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π")
	}

	return result
}

// –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func printResult(word string, result []string) {
	for _, letter := range word {
		fmt.Printf("%c  ", letter)
	}
	fmt.Println()
	for _, r := range result {
		fmt.Printf("%s ", r)
	}
	fmt.Println()
}

func loadWords(filename string) ([]string, error) {
	file, err := os.Open(filename)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	var words []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		word := scanner.Text()
		if utf8.RuneCountInString(word) == 5 {
			words = append(words, word)
		}
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return words, nil
}

func getRandomWord(words []string) string {
	source := rand.NewSource(time.Now().UnixNano())
	rng := rand.New(source)
	return words[rng.Intn(len(words))]
}

func isWordInList(word string, words []string) bool {
	for _, w := range words {
		if word == w {
			return true
		}
	}
	return false
}

func main() {
	words, err := loadWords("russian2.txt")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤: %v", err)
	}
	wordx := getRandomWord(words)
	fmt.Println("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:", wordx)

	for try := 1; try <= 6; try++ {
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ 5-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
		var word string
		fmt.Scanf("%s\n", &word)
		word = strings.ToLower(word) // –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

		if !checkLen(word) || !checkLanguage(word) || !isWordInList(word, words) {
			fmt.Println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			try--
			continue
		}

		result := checkTry(word, wordx)
		printResult(word, result)

		//–≤—ã–∏–≥—Ä—ã—à
		if strings.Join(result, "") == "üü¢üü¢üü¢üü¢üü¢" {
			fmt.Println("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!")
			return
		}
	}

	fmt.Printf("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: %s\n", wordx)
}
