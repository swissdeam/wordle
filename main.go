package main

import (
	"fmt"
	"log"
	"regexp"
	"unicode/utf8"
)

// –ß—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
// –ø—Ä—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

// –°–ü–ò–°–û–ö –°–õ–£–ß–ê–ï–í
// 1. –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –±—É–∫–≤
// 2. —Å–ª–æ–≤–æ –Ω–µ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ
// 3. —Å–ª–æ–≤–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
// 4. –ü—Ä–æ–∏–≥—Ä—ã—à –∏ –≤—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
// 5. –≤—ã–∏–≥—Ä—ã—à
// 6. –î–ª–∏–Ω–∞ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ 5 //—Å–¥–µ–ª–∞–Ω–æ
// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —è–∑—ã–∫ //—Å–¥–µ–ª–∞–Ω–æ

func checkLen(word string) bool {
	// fmt.Println(len(word)) // —Å—á–∏—Ç–∞–µ–º –±–∞–π—Ç—ã
	// fmt.Println(utf8.RuneCountInString(word)) // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
	if utf8.RuneCountInString(word) != 5 {
		fmt.Printf("–í —Å–ª–æ–≤–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –±—É–∫–≤")
		return false
	}
	return true
}

func checkLanguage(word string) bool {
	var letters []string
	var isRussian = true
	for _, letter := range word {
		letters = append(letters, string(letter))
	}

	for _, rune := range letters {
		re := regexp.MustCompile("[–ê-–Ø–∞-—è]") //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∏—Ä—Ä–∏–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
		if !re.MatchString(rune) {
			isRussian = false
			fmt.Println("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º –Ω–∞–ø–∏—Å–∞–Ω–æ")
			break
		}
	}
	return isRussian
}

func checkTry(word string, wordx string) []string {
	var letters []string
	var lettersx []string
	var result []string
	used := make(map[string]int)
	usedx := make(map[string]int)
	for _, letter := range word {
		letters = append(letters, string(letter))
	}
	log.Println(letters)
	log.Println(lettersx)
	for _, letterx := range wordx {
		lettersx = append(lettersx, string(letterx))
	}
	result = make([]string, len(letters))
	for i, rune := range letters {
		for j, runex := range lettersx {
			log.Println("c—Ä–∞–≤–Ω–∏–≤–∞–µ–º <<", rune, ">> –Ω–∞ –º–µ—Å—Ç–µ", i, " –∏ <<", runex, ">> –Ω–∞ –º–µ—Å—Ç–µ", j)
			if i == j && rune == runex {
				result[j] = "üü¢"
				usedx[runex] = j
				if used[runex] < i {
					fmt.Println(used[runex], "yellow")
					result[used[runex]] = "‚ö´"
				}
				i++
				j = 0
			} else if i != j && rune == runex && usedx[runex] != j {
				result[i] = "üü°"
				used[runex] = i
				usedx[runex] = j
				i++
				j = 0
			} else {
				result[i] = "‚ö´"
			}
			log.Println(result, "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π")
		}
	}

	log.Println(letters)
	log.Println(result)
	return result
}

func main() {
	wordx := "—Å–±–æ–ª—Ç"
	for try := 1; try <= 6; try++ {
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ 5-–±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
		var word string
		fmt.Scanf("%s\n", &word)
		if !checkLen(word) || !checkLanguage(word) {
			break
		}
		checkTry(word, wordx)
	}
}
